  <?php

/**
 * @file
 * Contains product_builder_preview.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\commerce_product\Plugin\Field\FieldWidget\ProductVariationAttributesWidget;

/**
 * Implements hook_theme().
 */
function product_builder_preview_theme() {
  return [
    'product_builder_preview_element' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_product_builder_preview_element(&$variables) {
  $element = $variables['element'];

  $suggestions = product_builder_preview_suggestions_list();
  $template_file = product_builder_preview_get_suggestion_template($suggestions);
  $template_variables = product_builder_preview_get_template_variables($template_file);

  foreach ($template_variables as $variable_name) {
    if (strpos($variable_name, 'state_variables') !== FALSE) {
      continue;
    }

    $variables[$variable_name] = $element["#$variable_name"];
  }
  $variables['state_variables'] = $element['#state_variables'];
}

/**
 * Implements hook_form_alter().
 */
function product_builder_preview_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $form_builder = $form_state->getBuildInfo();
  if (isset($form_builder['base_form_id']) && ($form_builder['base_form_id'] == 'product_builder_form')) {

    $suggestions = product_builder_preview_suggestions_list();
    $template_file = product_builder_preview_get_suggestion_template($suggestions);
    $template_variables = product_builder_preview_get_template_variables($template_file);

    foreach ($template_variables as $variable_name) {
      if (strpos($variable_name, 'state_variables') !== FALSE) {
        continue;
      }

      if (!isset($form['product_builder_preview_element'])) {
        $form['product_builder_preview_element'] = [
          '#theme' => 'product_builder_preview_element',
          '#weight' => 100,
        ];
      }

      $form['product_builder_preview_element']['#state_variables'] = product_builder_preview_get_preview_state_variables($form_state);
      $form['product_builder_preview_element']["#$variable_name"] = $form[$variable_name];
      unset($form[$variable_name]);
    }


    // Hardcoded AJAX callback for one textfield form.
    // @todo LA: rework this to apply AJAX callback intelligently, depending on form element type.
    $form = product_builder_preview_add_ajax_callback_recursively($form, 'product_builder_preview_ajax_preview_rebuild_callback');

    foreach (Element::children($form) as $key) {
      $form[$key]['#ajax']['callback'] = 'product_builder_preview_ajax_preview_rebuild_callback';
    }

    //@todo move to product_builder_preview_add_ajax_callback_recursively().
//    if (isset($form['purchased_entity']['widget'][0]['attributes'])) {
      foreach (Element::children($form['purchased_entity']['widget'][0]['attributes']) as $key) {
        $form['purchased_entity']['widget'][0]['attributes'][$key]['#ajax']['callback'] = 'product_builder_preview_ajax_preview_rebuild_callback';
      }
//    }
  }
}

  /**
   * Applies AJAX callback recursively to the form elements.
   *
   * @param array $el
   *   FAPI element
   *
   * @param string $callback
   *   AJAX callback function name.
   *
   * @return array
   *   Processed FAPI element.
   */
function product_builder_preview_add_ajax_callback_recursively($el, $callback) {
  //@todo move this to kind of info hook. Probably should contain triggering events as well.
  $types_mapping = [
    'textfield' => 'change',
  ];

  foreach (Element::children($el) as $key) {
    $children = Element::children($el[$key]);
    if ($children) {
      $el[$key] = product_builder_preview_add_ajax_callback_recursively($el[$key], $callback);
    }

    if (array_key_exists('#type', $el[$key]) && array_key_exists($el[$key]['#type'], $types_mapping)) {
      $el[$key]['#ajax']['callback'] = $callback;
      $el[$key]['#ajax']['event'] = $types_mapping[$el[$key]['#type']];
      $el[$key]['#ajax']['disable-refocus'] = TRUE;
    }
  }

  return $el;
}

/**
 * Ajax callback for refresh product builder preview.
 */
function product_builder_preview_ajax_preview_rebuild_callback(array $form, FormStateInterface $form_state) {

  $form_builder = \Drupal::service('form_builder');
  $form = $form_builder->rebuildForm('product_builder_map_builder_add_form', $form_state, $form);

  //Ajax response that refresh variation widget
  //@todo When ajax is added to no attributes field add correct condition
  // Check if there is a product attribtues widget in a form.
//  if (isset($form['purchased_entity']['widget'][0]['attributes'])) {
//    $original_view_mode = $form_state->get('view_mode');
//    $form_state->set('view_mode', 'full');
//    //actual attachments are added inside this method
//    $ajax_response = ProductVariationAttributesWidget::ajaxRefresh($form, $form_state);
//    $form_state->get('view_mode', $original_view_mode);
//  }
//  else {
    $ajax_response = new AjaxResponse();
    //Attach actual attachments
    $attachments = product_builder_preview_get_form_attachments($form);
    $ajax_response->setAttachments($attachments);
//  }

  $ajax_response->addCommand(new ReplaceCommand('#product-builder-preview', \Drupal::service('renderer')->renderRoot($form['product_builder_preview_element'])));

  return $ajax_response;
}

/**
 * Return form actual attachments.
 * see renderResponse method of Drupal\Core\Render\MainContent\AjaxRenderer class.
 */
function product_builder_preview_get_form_attachments($form) {
  \Drupal::service('renderer')->renderRoot($form);

  return $form['#attached'];
}

/**
 * Return product builder preview suggestions list.
 */
function product_builder_preview_suggestions_list() {
  return [
    'product_builder_preview_element',
  ];
}

/**
 * Get templates variables for template.
 */
function product_builder_preview_get_template_variables($template_file) {

  $variables = &drupal_static(__FUNCTION__, []);

  if (isset($variables[$template_file])) {
    return $variables[$template_file];
  }

  $twig_service = \Drupal::service('twig');
  $loader = \Drupal::service('twig.loader.filesystem');
  $parsed = $twig_service->parse($twig_service->tokenize($loader->getSource($template_file)));
  $variables[$template_file] = product_builder_preview_get_twig_variable_names($parsed);

  return $variables[$template_file];
}

/**
 * Get template for suggestions list.
 */
function product_builder_preview_get_suggestion_template($suggestions) {
  $theme_registry = \Drupal::service('theme.registry');
  $theme_registry = $theme_registry->getRuntime();
  foreach (array_reverse($suggestions) as $suggestion) {
    if ($theme_registry->has($suggestion)) {
      $info = $theme_registry->get($suggestion);
      break;
    }
  }

  $extension = '.html.twig';
  $template_file = $info['template'] . $extension;
  if (isset($info['path'])) {
    $template_file = $info['path'] . '/' . $template_file;
  }

  return $template_file;
}

/**
 * Get twig template variables names.
 */
function product_builder_preview_get_twig_variable_names($nodes) {
  $variables = [];
  foreach ($nodes as $node) {
    if ($node instanceof \Twig_Node_Expression_Name) {
      $name = $node->getAttribute('name');
      $variables[$name] = $name;
    } elseif ($node instanceof \Twig_Node_Expression_Constant && $nodes instanceof \Twig_Node_Expression_GetAttr) {
      $value = $node->getAttribute('value');
      if (!empty($value) && is_string($value)) {
        $variables[$value] = $value;
      }
    } elseif ($node instanceof \Twig_Node_Expression_GetAttr) {
      $path = implode('.', product_builder_preview_get_twig_variable_names($node));
      if (!empty($path)) {
        $variables[$path] = $path;
      }
    } elseif ($node instanceof \Twig_Node) {
      $variables += product_builder_preview_get_twig_variable_names($node);
    }
  }

  return $variables;
}

/**
 * Return product builder preview state variables.
 */
function product_builder_preview_get_preview_state_variables($form_state) {
  $state_values = $form_state->getValues();
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();

  $prepared_values = product_builder_preview_entity_get_prepared_fields($entity, $state_values);

  if (isset($state_values['purchased_entity'][0]['variation'])) {
    $prepared_values['variation'] = product_builder_preview_prepared_values($state_values['purchased_entity'][0]['variation']);
  }
  else {
    $prepared_values['variation'] = \Drupal::request()->query->get('variation_id');
  }

  if ($entity = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($prepared_values['variation'])) {
    $prepared_values['variation'] = product_builder_preview_entity_get_prepared_fields($entity);
  }

  return $prepared_values;
}

/**
 * Prepared data for template.
 */
function product_builder_preview_prepared_values($values) {
  if (!is_array($values)) {
    return $values;
  }

  $prepared = [];
  foreach ($values as $name => $value) {

    if (is_array($value)) {
      $interim = product_builder_preview_prepared_values($values[$name]);
      if (is_array($interim)) {
        $prepared += $interim;
      }
      else {
        $prepared[$name] = $interim;
      }
    }
    else {
      $prepared[$name] = $value;
    }

  }

  if (count($prepared) === 1) {
    $first_element = key($prepared);
    return $prepared[$first_element];
  }

  return $prepared;
}

/**
 * Get field cardinality.
 */
function product_builder_preview_get_field_cardinality($field_definition) {
  $cardinality = 1;
  if (method_exists($field_definition,'getCardinality')) {
    $cardinality = $field_definition->getCardinality();
  }
  elseif (method_exists($field_definition,'getFieldStorageDefinition')) {
    $field_storage_definition = $field_definition->getFieldStorageDefinition();
    if (method_exists($field_storage_definition,'getCardinality')) {
      $cardinality = $field_storage_definition->getCardinality();
    }
  }

  return $cardinality;
}

/**
 * Prepare fields for entity. This data send to template.
 */
function product_builder_preview_entity_get_prepared_fields($entity, $state_values = FALSE) {

  foreach ($entity->getFields() as $name => $property) {
    if ($name == 'type') {
      continue;
    }
    //Product has reference to variation, variation has reference to product
    if ($name == 'product_id') {
      continue;
    }
    $field_definition = $property->getFieldDefinition();
    $type = $field_definition->getType();
    $cardinality = product_builder_preview_get_field_cardinality($field_definition);

    //Write value from form_state values
    if (isset($state_values[$name])) {
      $values[$name] = $state_values[$name];
    }
    else {
      $values[$name] = $property->getValue();
    }

    if ($cardinality === 1) {
      $values[$name] = product_builder_preview_prepared_values($values[$name]);

      if ($type == 'entity_reference') {
        $entity_type = $field_definition->getSetting('target_type');

        $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($values[$name]);
        if (method_exists($entity, 'getFields')) {
          $values[$name] = product_builder_preview_entity_get_prepared_fields($entity);
        }

      }
    }
    else {
      foreach ($values[$name] as $key => $value) {
        $values[$name][$key] = product_builder_preview_prepared_values($value);

        if ($type == 'entity_reference') {
          $entity_type = $field_definition->getSetting('target_type');

          $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($values[$name][$key]);
          if (method_exists($entity, 'getFields')) {
            $values[$name][$key]= product_builder_preview_entity_get_prepared_fields($entity);
          }

        }
      }
    }

  }

  return $values;
}
