<?php

/**
 * @file
 * Contains product_builder_preview.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\commerce_product\Plugin\Field\FieldWidget\ProductVariationAttributesWidget;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Ajax\AfterCommand;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function product_builder_preview_theme() {
  return [
    'product_builder_preview_element' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function product_builder_preview_theme_suggestions_product_builder_preview_element(array $variables) {
  $suggestions = [];

  $suggestions[] = 'product_builder_preview_element';
  $suggestions[] = 'product_builder_preview_element__' . $variables['element']['#product_builder']->bundle();

  return $suggestions;
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_product_builder_preview_element(&$variables) {
  $element = $variables['element'];
  $suggestions = product_builder_preview_suggestions_list($variables['element']['#product_builder']);
  $template_file = product_builder_preview_get_suggestion_template($suggestions);
  $template_variables = product_builder_preview_get_template_variables($template_file);

  foreach ($template_variables as $variable_name) {
    if (strpos($variable_name, 'state_variables') !== FALSE) {
      continue;
    }

    if (isset($element[$variable_name])) {
      $variables[$variable_name] = $element[$variable_name];
    }
  }
  $variables['state_variables'] = $element['#state_variables'];
}

/**
 * Implements hook_views_data_alter().
 */
function product_builder_preview_views_data_alter(&$data) {
  $data['product_builder']['preview_element'] = array(
    'title' => t('Preview Element'),
    'group' => t('Content'),
    'field' => array(
      'title' => t('Preview'),
      'help' => t('Product builder preview element.'),
      'id' => 'product_builder_preview_element_field',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function product_builder_preview_form_alter(array &$form, FormStateInterface &$form_state, $form_id) {
  $form_builder = $form_state->getBuildInfo();
  if (isset($form_builder['base_form_id']) && ($form_builder['base_form_id'] == 'product_builder_form')) {
    $form['#attributes']['autocomplete'] = 'off';

    $product = $form_state->get('product');
    $entity = $form_state->getFormObject()->getEntity();
    $suggestions = product_builder_preview_suggestions_list($entity);
    $template_file = product_builder_preview_get_suggestion_template($suggestions);
    $template_variables = product_builder_preview_get_template_variables($template_file);
    $form_storage = $form_state->getStorage();

    if ($preview_component = $form_storage['form_display']->getComponent('builder_preview')) {
      $form['builder_preview'] = [
        '#theme' => 'product_builder_preview_element',
        '#weight' => $preview_component['weight'],
        '#process' => [
          ['Drupal\Core\Render\Element\RenderElement', 'processGroup']
        ],
        '#pre_render' => [
          ['Drupal\Core\Render\Element\RenderElement', 'preRenderGroup']
        ],
        // Need this option to trick the field_group module.
        // Without this option, field_group may be treated like empty and therefore skipped rendering.
        // @see field_group.module:743
        '#markup' => '',
        '#state_variables' => product_builder_preview_get_preview_state_variables($form_state),
        '#product_builder' => $entity,
        '#prefix' => '<div id="product-builder-preview">',
        '#suffix' => '</div>',
      ];
    }

    foreach ($template_variables as $variable_name) {
      if (strpos($variable_name, 'state_variables') !== FALSE) {
        continue;
      }

      if (isset($form[$variable_name])) {
        $form['builder_preview'][$variable_name] = $form[$variable_name];
        unset($form[$variable_name]);
      }
    }

    $product_builder_type = \Drupal::entityTypeManager()->getStorage('product_builder_type')->load($entity->bundle());
    $ajax_settings = $product_builder_type->getThirdPartySetting('product_builder_preview', 'do_not_use_ajax', []);

    // Hardcoded AJAX callback for one textfield form.
    $form = product_builder_preview_add_ajax_callback_recursively($form, 'product_builder_preview_ajax_preview_rebuild_callback', $ajax_settings);

    // Add custom class to product variation wrapper. In further that class
    // uses for attributes update.
    $form['purchased_entity']['#attributes']['class'][] = "product_builder_purchased_entity_product_{$product->id()}_wrapper";
  }

  // Added template variables list.
  if (($form_id == 'entity_form_display_edit_form') || ($form_id == 'entity_view_display_edit_form')) {
    $entity = $form_builder['callback_object']->getEntity();
    $entity_type = $entity->getTargetEntityTypeId();
    $bundle = $entity->getTargetBundle();

    if ($entity_type == 'product_builder') {
      $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->create(['type' => $bundle]);
      $data = product_builder_preview_entity_get_prepared_fields($entity);

      if ($variation_type = product_builder_preview_get_builder_variation_type($bundle)) {
        $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->create(['type' => $variation_type]);
        $data['variation'] = product_builder_preview_entity_get_prepared_fields($variation);
      }

      $form['product_builder_state_variables'] = [
        '#title' => t('Product Builder Variables'),
        '#type' => 'details',
        '#open' => FALSE,
      ];
      $form['product_builder_state_variables']['state_variables'] = [
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#items' => product_builder_preview_prepared_fields_list($data, 'state_variables'),
      ];
    }
  }

  if ($form_id == 'entity_form_display_edit_form') {
    $form_entity = $form_state->getFormObject()->getEntity();
    if ($form_entity->getTargetEntityTypeId() === 'product_builder') {
      $product_builder_type = \Drupal::entityTypeManager()->getStorage('product_builder_type')->load($form_entity->getTargetBundle());
      $ajax_setting = $product_builder_type->getThirdPartySetting('product_builder_preview', 'do_not_use_ajax', []);
      foreach (Element::children($form['fields']) as $key) {
        if (!empty($form['fields'][$key]['plugin']['settings_edit_form'])) {
          $form['fields'][$key]['plugin']['settings_edit_form']['actions']['save_settings']['#submit'][] = 'product_builder_preview_form_display_save_ajax_settings_callback';
          $form['fields'][$key]['plugin']['settings_edit_form']['settings']['do_not_use_ajax'] = [
            '#type' => 'checkbox',
            '#title' => t('Do not use ajax'),
            '#default_value' => isset($ajax_setting[$key]) ? $ajax_setting[$key] : FALSE
          ];
        }
      }
    }
  }
}

/**
 * Save ajax settings callback.
 */
function product_builder_preview_form_display_save_ajax_settings_callback(&$form, FormStateInterface $form_state) {
  $form_entity = $form_state->getFormObject()->getEntity();
  $product_builder_type = \Drupal::entityTypeManager()->getStorage('product_builder_type')->load($form_entity->getTargetBundle());
  $ajax_setting = $product_builder_type->getThirdPartySetting('product_builder_preview', 'do_not_use_ajax', []);
  $values = $form_state->getValues();
  foreach (Element::children($values['fields']) as $key) {
    if (isset($values['fields'][$key]['settings_edit_form']['settings']['do_not_use_ajax'])) {
      $ajax_setting[$key] = $values['fields'][$key]['settings_edit_form']['settings']['do_not_use_ajax'];
    }
  }
  $product_builder_type->setThirdPartySetting('product_builder_preview', 'do_not_use_ajax', $ajax_setting);
  $product_builder_type->save();
}

/**
 * Return variation type which uses product builder by bundle.
 *
 * @param string $bundle
 *   Bundle name.
 *
 * @return mixed
 */
function product_builder_preview_get_builder_variation_type($bundle) {
  $product_types = \Drupal::service('entity.manager')->getStorage('commerce_product_type')->loadMultiple();
  foreach ($product_types as $name => $product_type) {
    $variations_formatter = EntityViewDisplay::load('commerce_product.' . $name . '.default')->getRenderer('variations');
    if ($variations_formatter !== NULL) {
      $plugin_id = $variations_formatter->getPluginId();
      if (($plugin_id == 'product_builder_add_to_cart' || $plugin_id == 'embed_product_builder_add_to_cart') && ($variations_formatter->getSetting('builder_bundle') == $bundle)) {
        return $product_type->getVariationTypeId();
      }
    }
  }

  return FALSE;
}

/**
 * Return list of prepared fields.
 *
 * @param array $data
 *   Prepared fields array.
 *
 * @param string $line
 *   Prefix line.
 *
 * @return array
 */
function product_builder_preview_prepared_fields_list($data, $line = '') {
  $list = [];
  foreach ($data as $key => $element) {
    $list[] = "$line.$key";
    if (is_array($element)) {
      $list = array_merge($list, product_builder_preview_prepared_fields_list($element, "$line.$key"));
    }
  }

  return $list;
}

/**
 * Applies AJAX callback recursively to the form elements.
 *
 * @param array $el
 *   FAPI element
 *
 * @param string $callback
 *   AJAX callback function name.
 *
 * @return array
 *   Processed FAPI element.
 */
function product_builder_preview_add_ajax_callback_recursively($el, $callback, $ajax_settings = []) {
  //@todo move this to kind of info hook. Probably should contain triggering events as well.
  $types_mapping = [
    'textfield' => 'change',
    'select' => 'change',
    'radios' => 'change',
    'checkboxes' => 'change',
    'checkbox' => 'change',
    'commerce_product_rendered_attribute' => 'change',
    'number' => 'change'
  ];

  $process_ajax = [
    'managed_file' => 'product_builder_preview_process_file_field_ajax_callback'
  ];

  foreach (Element::children($el) as $key) {
    if (!empty($ajax_settings[$key])) {
      continue;
    }

    $children = Element::children($el[$key]);
    if ($children) {
      $el[$key] = product_builder_preview_add_ajax_callback_recursively($el[$key], $callback, $ajax_settings);
    }

    if (array_key_exists('#type', $el[$key]) && array_key_exists($el[$key]['#type'], $types_mapping)) {
      if (!empty($el[$key]['#ajax']['callback'])) {
        $el[$key]['#ajax']['options']['previous_callback'] = $el[$key]['#ajax']['callback'];
      }

      $el[$key]['#ajax']['callback'] = $callback;
      $el[$key]['#ajax']['event'] = $types_mapping[$el[$key]['#type']];
      $el[$key]['#ajax']['disable-refocus'] = TRUE;
      if (!isset($el[$key]['#ajax']['options']['query'])) {
        $el[$key]['#ajax']['options']['query'] = [];
      }
    }
    if (array_key_exists('#type', $el[$key]) && array_key_exists($el[$key]['#type'], $process_ajax)) {
      $el[$key]['#process'][] = $process_ajax[$el[$key]['#type']];
    }
  }

  return $el;
}

/**
 * Process managed_file field.
 */
function product_builder_preview_process_file_field_ajax_callback(&$element, FormStateInterface $form_state, &$complete_form)  {
  $element['upload_button']['#ajax']['callback'] = 'product_builder_preview_ajax_preview_rebuild_callback';
  $element['remove_button']['#ajax']['callback'] = 'product_builder_preview_ajax_preview_rebuild_callback';

  return $element;
}

/**
 * Ajax callback for refresh product builder preview.
 */
function product_builder_preview_ajax_preview_rebuild_callback(array $form, FormStateInterface $form_state) {
  if ($triggering_element = $form_state->getTriggeringElement()) {
    $ajax_response = new AjaxResponse();

    $triggering_element_data = [
      'name' => $triggering_element['#name'],
      'field' => FALSE
    ];

    $product = $form_state->get('product');
    $form_object = $form_state->getFormObject();
    $entity = $form_object->getEntity();
    $fields = $entity->getFields(TRUE);
    if (isset($triggering_element['#parents'][0]) && isset($fields[$triggering_element['#parents'][0]])) {
      $triggering_element_data['field'] = 'field--name-' . Html::getClass($triggering_element['#parents'][0]);
    }

    unset($form['builder_preview']['#process']);
    unset($form['builder_preview']['#pre_render']);
    $preview = \Drupal::service('renderer')->renderRoot($form['builder_preview']);
    $price = \Drupal::service('renderer')->renderRoot($form['product_price']);
    $ajax_response->addCommand(new ReplaceCommand('#product-builder-preview', $preview));
    $ajax_response->addCommand(new ReplaceCommand('#product-builder-price', $price));
    $ajax_response->addCommand(new ReplaceCommand(
      ".product_builder_purchased_entity_product_{$product->id()}_wrapper",
      $form['purchased_entity']
    ));

    $ajax_response->addCommand(new SettingsCommand(['triggering_element_data' => $triggering_element_data]));

    $attachments = product_builder_preview_get_form_attachments($form);
    $ajax_response->addAttachments($attachments);
    $ajax_response->addAttachments($form['builder_preview']['#attached']);

    return $ajax_response;
  }
}

/**
 * Return form actual attachments.
 * see renderResponse method of Drupal\Core\Render\MainContent\AjaxRenderer class.
 */
function product_builder_preview_get_form_attachments($form) {
  \Drupal::service('renderer')->renderRoot($form);

  return $form['#attached'];
}

/**
 * Return product builder preview suggestions list.
 *
 * @param $entity
 *   Product builder entity.
 *
 * @return array
 */
function product_builder_preview_suggestions_list($entity) {
  return [
    'product_builder_preview_element',
    "product_builder_preview_element__{$entity->bundle()}"
  ];
}

/**
 * Get templates variables for template.
 */
function product_builder_preview_get_template_variables($template_file) {
  $variables = &drupal_static(__FUNCTION__, []);

  if (isset($variables[$template_file])) {
    return $variables[$template_file];
  }

  $twig_service = \Drupal::service('twig');
  $loader = \Drupal::service('twig.loader.filesystem');
  $parsed = $twig_service->parse($twig_service->tokenize($loader->getSource($template_file)));
  $variables[$template_file] = product_builder_preview_get_twig_variable_names($parsed);

  return $variables[$template_file];
}

/**
 * Get template for suggestions list.
 */
function product_builder_preview_get_suggestion_template($suggestions) {
  $theme_registry = \Drupal::service('theme.registry');
  $theme_registry = $theme_registry->getRuntime();
  foreach (array_reverse($suggestions) as $suggestion) {
    if ($theme_registry->has($suggestion)) {
      $info = $theme_registry->get($suggestion);
      break;
    }
  }

  $extension = '.html.twig';
  $template_file = $info['template'] . $extension;
  if (isset($info['path'])) {
    $template_file = $info['path'] . '/' . $template_file;
  }

  return $template_file;
}

/**
 * Get twig template variables names.
 */
function product_builder_preview_get_twig_variable_names($nodes) {
  $variables = [];
  foreach ($nodes as $node) {
    if ($node instanceof \Twig_Node_Expression_Name) {
      $name = $node->getAttribute('name');
      $variables[$name] = $name;
    } elseif ($node instanceof \Twig_Node_Expression_Constant && $nodes instanceof \Twig_Node_Expression_GetAttr) {
      $value = $node->getAttribute('value');
      if (!empty($value) && is_string($value)) {
        $variables[$value] = $value;
      }
    } elseif ($node instanceof \Twig_Node_Expression_GetAttr) {
      $path = implode('.', product_builder_preview_get_twig_variable_names($node));
      if (!empty($path)) {
        $variables[$path] = $path;
      }
    } elseif ($node instanceof \Twig_Node) {
      $variables += product_builder_preview_get_twig_variable_names($node);
    }
  }

  return $variables;
}

/**
 * Return product builder preview state variables.
 */
function product_builder_preview_get_preview_state_variables($form_state) {
  $state_values = $form_state->getUserInput();
  $state_values = array_merge($state_values, $form_state->getValues());
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  $state_values['form_state'] = $form_state;

  $prepared_values = product_builder_preview_entity_get_prepared_fields($entity, $state_values);

  if (($variation_id = $form_state->get('selected_variation')) || ($variation_id = \Drupal::request()->query->get('variation_id'))) {
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variation_id);
  }

  if (empty($variation) && ($variation_type = product_builder_preview_get_builder_variation_type($entity->bundle()))) {
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->create(['type' => $variation_type]);
  }

  if ($variation) {
    $prepared_values['variation'] = product_builder_preview_entity_get_prepared_fields($variation);
  }

  return $prepared_values;
}

/**
 * Prepared data for template.
 */
function product_builder_preview_prepared_values($values) {
  if (!is_array($values)) {
    return $values;
  }

  $prepared = [];
  foreach ($values as $name => $value) {

    if (is_array($value)) {
      $interim = product_builder_preview_prepared_values($values[$name]);
      if (is_array($interim)) {
        $prepared += $interim;
      }
      else {
        $prepared[$name] = $interim;
      }
    }
    else {
      $prepared[$name] = $value;
    }

  }

  if (count($prepared) === 1) {
    $first_element = key($prepared);
    return $prepared[$first_element];
  }

  return $prepared;
}

/**
 * Get field cardinality.
 */
function product_builder_preview_get_field_cardinality($field_definition) {
  $cardinality = 1;
  if (method_exists($field_definition,'getCardinality')) {
    $cardinality = $field_definition->getCardinality();
  }
  elseif (method_exists($field_definition,'getFieldStorageDefinition')) {
    $field_storage_definition = $field_definition->getFieldStorageDefinition();
    if (method_exists($field_storage_definition,'getCardinality')) {
      $cardinality = $field_storage_definition->getCardinality();
    }
  }

  return $cardinality;
}

/**
 * Prepare fields for entity. This data send to template.
 */
function product_builder_preview_entity_get_prepared_fields($entity, $state_values = FALSE) {
  foreach ($entity->getFields() as $name => $property) {
    $field_definition = $property->getFieldDefinition();
    $type = $field_definition->getType();
    $cardinality = product_builder_preview_get_field_cardinality($field_definition);

    $template_variables_manager = \Drupal::service('plugin.manager.builder_variables_plugin');
    $template_variables_fields = $template_variables_manager->getDefinitions();
    if (!isset($template_variables_fields[$type])) {
      continue;
    }

    $template_variables = $template_variables_manager->createInstance($type);
    $template_variables->setFieldDefinition($field_definition);
    //Write value from form_state values
    if (isset($state_values[$name])) {
      $values[$name] = $state_values[$name];
    }
    else {
      $values[$name] = $property->getValue();
    }

    if ($cardinality === 1) {
      $values[$name] = product_builder_preview_prepared_values($values[$name]);
      $values[$name] = $template_variables->prepare($values[$name]);
    }
    elseif ($values[$name]) {
      foreach ($values[$name] as $key => $value) {
        $values[$name][$key] = product_builder_preview_prepared_values($value);
        $values[$name][$key] = $template_variables->prepare($values[$name][$key]);
      }
    }
    else {
      $values[$name][0] = $template_variables->prepare('');
    }

    \Drupal::moduleHandler()->alter('product_builder_prepared_fields', $values[$name], $property, $state_values);
  }

  return $values;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function product_builder_preview_entity_extra_field_info() {
  $extra = [];
  $builder_types = \Drupal::entityTypeManager()->getStorage('product_builder_type')->loadMultiple();

  foreach ($builder_types as $type) {
    $extra['product_builder'][$type->id()]['display']['builder_preview'] = [
      'label' => t('Builder Preview'),
      'description' => t('Rendered Product Builder'),
      'weight' => 50,
    ];
    $extra['product_builder'][$type->id()]['form']['builder_preview'] = [
      'label' => t('Builder Preview'),
      'description' => t('Rendered Product Builder'),
      'weight' => 50,
    ];
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function product_builder_preview_entity_view(&$build, $entity, $display, $view_mode) {
  if ($builder_preview = $display->getComponent('builder_preview')) {
    $build += product_builder_preview_element_build($entity);
    $build['builder_preview']['#weight'] = $builder_preview['weight'];
  }
}

/**
 * Build preview element of product builder.
 *
 * @param $entity
 *   Product builder entity.
 *
 * @return array
 */
function product_builder_preview_element_build($entity) {
  $build = [];
  $prepared_values = product_builder_preview_entity_get_prepared_fields($entity);

  if ($variation_id = product_builder_get_builder_commerce_item($entity->id())) {
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variation_id);
  }

  if (empty($variation) && ($variation_type = product_builder_preview_get_builder_variation_type($entity->bundle()))) {
    $variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->create(['type' => $variation_type]);
  }

  if ($variation) {
    $prepared_values['variation'] = product_builder_preview_entity_get_prepared_fields($variation);
  }

  $build['builder_preview'] = [
    '#theme' => 'product_builder_preview_element',
    '#product_builder' => $entity,
    '#state_variables' => $prepared_values,
    '#prefix' => '<div class="overlay-box">',
    '#suffix' => '<div class="overlay"><div></div>'
  ];

  $suggestions = product_builder_preview_suggestions_list($entity);
  $template_file = product_builder_preview_get_suggestion_template($suggestions);
  $template_variables = product_builder_preview_get_template_variables($template_file);

  $form_object = \Drupal::entityTypeManager()->getFormObject('product_builder', 'edit');
  $form_object->setEntity($entity);
  $form = \Drupal::formBuilder()->getForm($form_object, []);

  foreach ($template_variables as $variable_name) {
    if (strpos($variable_name, 'state_variables') !== FALSE) {
      continue;
    }

    if (isset($form['pb-preview']['product_builder_preview_element'][$variable_name])) {
      $build['builder_preview'][$variable_name] = $form['pb-preview']['product_builder_preview_element'][$variable_name];
    }
  }

  //Rendering of form controls part needs for attaching js
  //@todo this part should test
  \Drupal::service('renderer')->render($form['pb-controls']);

  return $build;
}